


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-7 Playlist 4",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Introduce Sessions onto the Playlist application, enabling user accounts and cookie-based authentication.</p>",
  "folder" : "book-b-gomix-sessions",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Objectives",
    "shortTitle": "Lab-7 Playlist 4",
    "contentMd" : "# Objectives\n\nIntroduce Sessions onto the Playlist application, enabling user accounts and cookie-based authentication.\n\n"
    },
  
    {
    "title": "# Exercises Solutions",
    "shortTitle": "Exercise Solutions",
    "contentMd" : "# Exercises Solutions\n\nThis lab requires that the `playlist-3` lab be completed. If you have lost your solution, create a new project in Gomix and select the `import from github` option and enter `wit-hdip-comp-sci-2018/playlist-3` to import a completed version.\n\n\n## Exercise 1: Display Durations\n\nMake sure the duration of each song and playlist is visible on the UX\n\n### views/partials/listsongs.hbs\n\n~~~\n<table class=\"ui table\">\n  <thead>\n    <tr>\n      <th>Song</th>\n      <th>Artist</th>\n      <th>Duration</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    {{#each playlist.songs}}\n      <tr>\n        <td>\n          {{title}}\n        </td>\n        <td>\n          {{artist}}\n        </td>\n        <td>\n          {{duration}}\n        </td>\n        <td>\n          <a href=\"/playlist/{{../playlist.id}}/deletesong/{{id}}\" class=\"ui icon button\">\n            <i class=\"icon trash\"></i>\n          </a>\n        </td>\n      </tr>\n    {{/each}}\n  </tbody>\n</table>\n~~~\n\n## Exercise 2: Add Song Duration\n\nModify the add song form to accept a song duration as well as title and artist:\n\n## views/partials/addsong.hbs\n\n~~~\n<form class=\"ui stacked segment form\" action=\"/playlist/{{playlist.id}}/addsong\" method=\"POST\">\n  <div class=\"two fields\">\n    <div class=\"field\">\n      <label>Title</label>\n      <input placeholder=\"Title\" type=\"text\" name=\"title\">\n    </div>\n    <div class=\"field\">\n      <label>Artist</label>\n      <input placeholder=\"Artist\" type=\"text\" name=\"artist\">\n    </div>\n    <div class=\"field\">\n      <label>Duration</label>\n      <input placeholder=\"00\" type=\"number\" name=\"duration\">\n    </div>\n  </div>\n  <button class=\"ui blue submit button\">Add Song</button>\n</form>\n~~~\n\n## controllers/playlist.js\n\n~~~\n    const newSong = {\n      id: uuid(),\n      title: request.body.title,\n      artist: request.body.artist,\n      duration: Number(request.body.duration),\n    };\n~~~\n\n## Exercise 3: Active Duration\n\nThe durations in each playlist are just constants stored in the database. Currently, if you add a new playlist + songs, then the duration in the playlist will be undefined.\n\nChange this now, such that when you add a song to a playlist the duration displayed on the dashboard for each playlist will be the actual sum of the donations for all songs in the playlist.\n\n~~~\n...\n  addSong(id, song) {\n    const playlist = this.getPlaylist(id);\n    playlist.songs.push(song);\n\n    let duration = 0;\n    for (let i = 0; i < playlist.songs.length; i++) {\n      duration += playlist.songs[i].duration;\n    }\n\n    playlist.duration = duration;\n    this.store.save();\n  },\n...  \n~~~\n"
    },
  
    {
    "title": "# Playlist Model",
    "shortTitle": "02",
    "contentMd" : "# Playlist Model\n\nThis lab is based on Playlist-3. This can be imported into a new gomix project from `/wit-ict-summer-school-2017/playlist-3`.\n\n## models/playlist-store.js\n\nIf your project has any playlists in the json store, delete them now. Your store should look like this:\n\n## models/playlist-store.json\n\n~~~\n{\n  \"playlistCollection\": [\n  ]\n}\n~~~\n\n\nWe need a new method in the playlist-store module, which will retrieve a playlist based on a specific user id.\n\n## models/playlist-store.js\n\n~~~\n...\n  getUserPlaylists(userid) {\n    return this.store.findBy(this.collection, { userid: userid });\n  },\n...\n~~~\n\nThis new methods takes a userid, and will only fetch playlists belonging to the user with the specific id. We havent introduced the User model yet - nor are we storing playlists with such an id. We will make these changes in this lab."
    },
  
    {
    "title": "# UserStore",
    "shortTitle": "03",
    "contentMd" : "# UserStore\n\nNow we can introduce a new model:\n\n## models/user-store.js\n\n~~~\n'use strict';\n\nconst _ = require('lodash');\nconst JsonStore = require('./json-store');\n\nconst userStore = {\n\n  store: new JsonStore('./models/user-store.json', { users: [] }),\n  collection: 'users',\n\n  getAllUsers() {\n    return this.store.findAll(this.collection);\n  },\n\n  addUser(user) {\n    this.store.add(this.collection, user);\n  },\n\n  getUserById(id) {\n    return this.store.findOneBy(this.collection, { id: id });\n  },\n\n  getUserByEmail(email) {\n    return this.store.findOneBy(this.collection, { email: email });\n  },\n};\n\nmodule.exports = userStore;\n~~~\n\n\nAnd this is a pre-populated model store:\nus\n## models/user-store.json\n\n~~~\n{\n  \"users\": [\n    {\n      \"firstName\": \"homer\",\n      \"lastName\": \"simpson\",\n      \"email\": \"homer@simpson.com\",\n      \"password\": \"secret\",\n      \"id\": \"3ad52697-6d98-4d80-8273-084de55a86c0\"\n    },\n    {\n      \"firstName\": \"marge\",\n      \"lastName\": \"simpson\",\n      \"email\": \"marge@simpson.com\",\n      \"password\": \"secret\",\n      \"id\": \"2b6f0989-7b7f-4a38-ad26-aa06b922d751\"\n    }\n  ]\n}\n~~~\n\nIn the above we are pre-loading two users for test purposes."
    },
  
    {
    "title": "# Accounts views",
    "shortTitle": "04",
    "contentMd" : "# Accounts views\n\nWe need a suite of new views to support signup / login\n\n\n## views/index.hbs\n\n~~~\n{{> welcomemenu }}\n\n<section class=\"ui center aligned middle aligned segment\">\n  <p> Sign up or Log in... </p>\n</section>\n~~~\n\n## views/login.hbs\n\n~~~\n{{> welcomemenu id='login' }}\n\n<form class=\"ui stacked segment form\" action=\"/authenticate\" method=\"POST\">\n  <h3 class=\"ui header\">Log-in</h3>\n  <div class=\"field\">\n    <label>Email</label> <input placeholder=\"Email\" name=\"email\">\n  </div>\n  <div class=\"field\">\n    <label>Password</label> <input type=\"password\"  name=\"password\">\n  </div>\n  <button class=\"ui blue submit button\">Login</button>\n</form>\n~~~\n\n## views/signup.hbs\n\n~~~\n{{> welcomemenu id=\"signup\"}}\n\n<form class=\"ui stacked segment form\" action=\"/register\" method=\"POST\">\n  <h3 class=\"ui header\">Register</h3>\n  <div class=\"two fields\">\n    <div class=\"field\">\n      <label>First Name</label>\n      <input placeholder=\"First Name\" type=\"text\"  name=\"firstName\">\n    </div>\n    <div class=\"field\">\n      <label>Last Name</label>\n      <input placeholder=\"Last Name\" type=\"text\"  name=\"lastName\">\n    </div>\n  </div>\n  <div class=\"field\">\n    <label>Email</label>\n    <input placeholder=\"Email\" type=\"text\" name=\"email\">\n  </div>\n  <div class=\"field\">\n    <label>Password</label>\n    <input type=\"password\" name=\"password\">\n  </div>\n  <button class=\"ui blue submit button\">Submit</button>\n</form>\n~~~\n\nIn addition, a new menu which will support the above views:\n\n## views/partials/welcomemenu.hbs\n\n~~~\n<nav class=\"ui menu\">\n  <header class=\"ui header item\"> <a href=\"/\"> Playlist 4 </a></header>\n  <div class=\"right menu\">\n    <a id=\"signup\" class=\"item\" href=\"/signup\"> Signup  </a>\n    <a id=\"login\" class=\"item\" href=\"/login\">  Login   </a>\n  </div>\n</nav>\n\n<script>\n  $(\"#{{id}}\").addClass(\"active item\");\n</script>\n~~~\n\nAnd finally, we need to extend the menu partial - which will introduce a new menu option to allow a user to log out:\n\n## views/partials/menu.hbs\n\n~~~\n<nav class=\"ui menu\">\n  <header class=\"ui header item\"> <a href=\"/\"> Playlist 4 </a></header>\n  <div class=\"right menu\">\n    <a id=\"dashboard\" class=\"item\" href=\"/dashboard\"> Dashboard  </a>\n    <a id=\"about\" class=\"item\" href=\"/about\"> About </a>\n    <a id=\"logout\" class=\"item\" href=\"/logout\"> Logout </a>\n  </div>\n</nav>\n\n<script>\n  $(\"#{{id}}\").addClass(\"active item\");\n</script>\n~~~\n\n"
    },
  
    {
    "title": "# Accounts controller",
    "shortTitle": "05",
    "contentMd" : "# Accounts controller\n\nThis is a new controller to support these views:\n\n## controllers/accounts\n\n~~~\n'use strict';\n\nconst userstore = require('../models/user-store');\nconst logger = require('../utils/logger');\nconst uuid = require('uuid');\n\nconst accounts = {\n\n  index(request, response) {\n    const viewData = {\n      title: 'Login or Signup',\n    };\n    response.render('index', viewData);\n  },\n\n  login(request, response) {\n    const viewData = {\n      title: 'Login to the Service',\n    };\n    response.render('login', viewData);\n  },\n\n  logout(request, response) {\n    response.cookie('playlist', '');\n    response.redirect('/');\n  },\n\n  signup(request, response) {\n    const viewData = {\n      title: 'Login to the Service',\n    };\n    response.render('signup', viewData);\n  },\n\n  register(request, response) {\n    const user = request.body;\n    user.id = uuid();\n    userstore.addUser(user);\n    logger.info(`registering ${user.email}`);\n    response.redirect('/');\n  },\n\n  authenticate(request, response) {\n    const user = userstore.getUserByEmail(request.body.email);\n    if (user) {\n      response.cookie('playlist', user.email);\n      logger.info(`logging in ${user.email}`);\n      response.redirect('/dashboard');\n    } else {\n      response.redirect('/login');\n    }\n  },\n\n  getCurrentUser(request) {\n    const userEmail = request.cookies.playlist;\n    return userstore.getUserByEmail(userEmail);\n  },\n};\n\nmodule.exports = accounts;\n~~~"
    },
  
    {
    "title": "# Routes",
    "shortTitle": "06",
    "contentMd" : "# Routes\n\nThese new views+ controller  all require new routes:\n\n## routes.js\n\nIn particular, these specific routes:\n\n~~~\n\n...\nconst accounts = require('./controllers/accounts.js');\n...\n\n...\nrouter.get('/', accounts.index);\nrouter.get('/login', accounts.login);\nrouter.get('/signup', accounts.signup);\nrouter.get('/logout', accounts.logout);\nrouter.post('/register', accounts.register);\nrouter.post('/authenticate', accounts.authenticate);\n...\n~~~\n\nThis is the complete revised routes.js\n\n~~~\n'use strict';\n\nconst express = require('express');\nconst router = express.Router();\n\nconst dashboard = require('./controllers/dashboard.js');\nconst about = require('./controllers/about.js');\nconst playlist = require('./controllers/playlist.js');\n\nrouter.get('/', accounts.index);\nrouter.get('/login', accounts.login);\nrouter.get('/signup', accounts.signup);\nrouter.get('/logout', accounts.logout);\nrouter.post('/register', accounts.register);\nrouter.post('/authenticate', accounts.authenticate);\n\nrouter.get('/dashboard', dashboard.index);\nrouter.get('/dashboard/deleteplaylist/:id', dashboard.deletePlaylist);\nrouter.post('/dashboard/addplaylist', dashboard.addPlaylist);\n\nrouter.get('/about', about.index);\nrouter.get('/playlist/:id', playlist.index);\nrouter.get('/playlist/:id/deletesong/:songid', playlist.deleteSong);\nrouter.post('/playlist/:id/addsong', playlist.addSong);\n\nmodule.exports = router;\n~~~\n\nThe application should be running now. You should see these new views:\n\n### A new landing page\n\n![](img/02.png)\n\n### Signup\n\n![](img/01.png)\n\n### login\n\n![](img/03.png)\n\n"
    },
  
    {
    "title": "# Dashboard",
    "shortTitle": "07",
    "contentMd" : "# Dashboard\n\nTry the following now:\n\n- Log in as 'homer@simpson', 'secret'. \n- Add a playlist called 'test'.\n- logout\n- Log in as 'marge@simpson', 'secret'. \n\nNotice that we are seeing Homers test playlist even when we log in as marge? The playlist-store.json may look like this:\n\n~~~\n{\n  \"playlistCollection\": [\n    {\n      \"id\": \"4a1ea4ec-303e-4b13-bd98-a6b04877e093\",\n      \"title\": \"test\",\n      \"songs\": []\n    }\n  ]\n}\n~~~\n\n(you will need to refresh the Glitch Editor view to see the above change)\n\nThis clearly is not what we were aiming for. We should only present the users own play lists.\n\nHere is how do it - all changes to the dashboard module:\n\n## controller/dashboard.js\n\nIn the top of the module, import the new accounts module:\n\n~~~\n...\nconst accounts = require ('./accounts.js');\n...\n~~~\n\nRevised index action:\n\n~~~\n...\n  index(request, response) {\n    logger.info('dashboard rendering');\n    const loggedInUser = accounts.getCurrentUser(request);\n    const viewData = {\n      title: 'Playlist Dashboard',\n      playlists: playlistStore.getUserPlaylists(loggedInUser.id),\n    };\n    logger.info('about to render', playlistStore.getAllPlaylists());\n    response.render('dashboard', viewData);\n  },\n...\n~~~\n\nRevised addPlaylist action:\n\n~~~\n...\n  addPlaylist(request, response) {\n    const loggedInUser = accounts.getCurrentUser(request);\n    const newPlayList = {\n      id: uuid(),\n      userid: loggedInUser.id,\n      title: request.body.title,\n      songs: [],\n    };\n    logger.debug('Creating a new Playlist', newPlayList);\n    playlistStore.addPlaylist(newPlayList);\n    response.redirect('/dashboard');\n  },\n...\n~~~\n\nLog in again as marge and homer in turn, creating a single playlist (use a name you will remember). Make sure that the appropriate playlist appears in each users dashboard.\n\n\n## The Stores\n\nLooking at the playlist-store.json - it might (eventually when loaded) look like this:\n\n~~~\n{\n  \"playlistCollection\": [\n    {\n      \"id\": \"4a1ea4ec-303e-4b13-bd98-a6b04877e093\",\n      \"title\": \"test\",\n      \"songs\": []\n    },\n    {\n      \"id\": \"1e6ed5a0-28fe-4527-8ce8-6cb5c800b5be\",\n      \"userid\": \"2b6f0989-7b7f-4a38-ad26-aa06b922d751\",\n      \"title\": \"marges playlist\",\n      \"songs\": []\n    },\n    {\n      \"id\": \"07dd66fe-9f8f-456c-944d-48330bde4610\",\n      \"userid\": \"3ad52697-6d98-4d80-8273-084de55a86c0\",\n      \"title\": \"homers playlist\",\n      \"songs\": []\n    }\n  ]\n}\n~~~\n\nExamine it carefully - notice that the very first playlist is 'orphaned' - it has no userid. The others have userid - which corellates the playlists with the user in the users store:\n\n~~~\n{\n  \"users\": [\n    {\n      \"firstName\": \"homer\",\n      \"lastName\": \"simpson\",\n      \"email\": \"homer@simpson.com\",\n      \"password\": \"secret\",\n      \"id\": \"3ad52697-6d98-4d80-8273-084de55a86c0\"\n    },\n    {\n      \"firstName\": \"marge\",\n      \"lastName\": \"simpson\",\n      \"email\": \"marge@simpson.com\",\n      \"password\": \"secret\",\n      \"id\": \"2b6f0989-7b7f-4a38-ad26-aa06b922d751\"\n    }\n  ]\n}\n~~~\n\n"
    },
  
    {
    "title": "# Exercise",
    "shortTitle": "Exercises",
    "contentMd" : "# Exercise\n\nThis is the completed archive at this stage:\n\n- <https://github.com/wit-hdip-comp-sci-2018/playlist-4>\n\nIt can be imported into gomix using `wit-hdip-comp-sci-2018/playlist-4`\n\n## Exercise 1\n\nTest the application more comprehensively - signing up a range of users, and creating playlists. Make sure the users only see the playlists they have created.\n\n\n## Exercise 2\n\nLook at the `authenticate` method again:\n\n~~~\n  authenticate(request, response) {\n    const user = userstore.getUserByEmail(request.body.email);\n    if (user) {\n      response.cookie('playlist', user.email);\n      logger.info(`logging in ${user.email}`);\n      response.redirect('/dashboard');\n    } else {\n      response.redirect('/login');\n    }\n  },\n~~~\n\nCan you see anything not quite right about it? \n\nHint: what happens if incorrect password entered? Try this now.\n\nSee if you can fix this problem - i.e. only allow user to log in if they provide correct password.\n"
    }
  
  ]
  }

